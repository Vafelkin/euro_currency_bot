import logging
import os
import sys
from datetime import datetime
import signal
import requests
from bs4 import BeautifulSoup
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, UPDATE_INTERVAL, RATE_MESSAGE_TEMPLATE

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
KEYBOARD = ReplyKeyboardMarkup([['üí∂ –ö—É—Ä—Å –µ–≤—Ä–æ']], resize_keyboard=True)

class EuroRateParser:
    def __init__(self):
        self.url = "https://ligovka.ru/detailed/eur"
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        self.last_buy_rate = None
        self.last_sell_rate = None

    def get_rate(self) -> tuple[float, float, bool] | tuple[None, None, bool]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –æ–Ω
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∫—É—Ä—Å –ø–æ–∫—É–ø–∫–∏, –∫—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏, —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
        """
        try:
            logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∫—É—Ä—Å –µ–≤—Ä–æ —Å {self.url}...")
            response = requests.get(self.url, headers=self.headers, timeout=10)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å "–æ—Ç 1" –≤ —Ç–∞–±–ª–∏—Ü–µ –∫—É—Ä—Å–æ–≤
            row = soup.find('td', class_='money_quantity', string='–æ—Ç 1')
            if row and row.parent:
                # –ù–∞—Ö–æ–¥–∏–º —è—á–µ–π–∫–∏ —Å –∫—É—Ä—Å–∞–º–∏ –≤ —ç—Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ
                buy_cell = row.parent.find('td', class_='money_price buy_price')
                sell_cell = buy_cell.find_next('td', class_='money_price') if buy_cell else None
                
                if buy_cell and sell_cell:
                    buy_rate = float(buy_cell.text.strip())
                    sell_rate = float(sell_cell.text.strip())
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∫—É—Ä—Å
                    rate_changed = (
                        self.last_buy_rate is not None and
                        self.last_sell_rate is not None and
                        (abs(buy_rate - self.last_buy_rate) >= 0.01 or
                         abs(sell_rate - self.last_sell_rate) >= 0.01)
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫—É—Ä—Å—ã
                    self.last_buy_rate = buy_rate
                    self.last_sell_rate = sell_rate
                    
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∫—É—Ä—Å—ã: –ø–æ–∫—É–ø–∫–∞ {buy_rate}, –ø—Ä–æ–¥–∞–∂–∞ {sell_rate}")
                    if rate_changed:
                        logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞!")
                    return buy_rate, sell_rate, rate_changed
            
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—É—Ä—Å—ã EUR –¥–ª—è —Å—É–º–º—ã '–æ—Ç 1'")
            return None, None, False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –µ–≤—Ä–æ: {e}")
            return None, None, False

parser = EuroRateParser()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ –µ–≤—Ä–æ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "üí∂ –ö—É—Ä—Å –µ–≤—Ä–æ" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞.',
        reply_markup=KEYBOARD
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if update.message.text == 'üí∂ –ö—É—Ä—Å –µ–≤—Ä–æ':
        await get_rate(update, context)

async def get_rate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞"""
    rates = parser.get_rate()
    if rates and len(rates) == 3:
        buy_rate, sell_rate, _ = rates  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        current_time = datetime.now().strftime("%H:%M:%S")
        await update.message.reply_text(
            RATE_MESSAGE_TEMPLATE.format(
                buy_rate=buy_rate,
                sell_rate=sell_rate,
                time=current_time
            ),
            reply_markup=KEYBOARD
        )
    else:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –µ–≤—Ä–æ.",
            reply_markup=KEYBOARD
        )

async def send_rate_update(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞"""
    rates = parser.get_rate()
    if rates and len(rates) == 3:
        buy_rate, sell_rate, rate_changed = rates
        if rate_changed:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫—É—Ä—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
            current_time = datetime.now().strftime("%H:%M:%S")
            message = f"‚ùóÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞!\n\n" + RATE_MESSAGE_TEMPLATE.format(
                buy_rate=buy_rate,
                sell_rate=sell_rate,
                time=current_time
            )
            await context.bot.send_message(
                chat_id=TELEGRAM_CHAT_ID,
                text=message
            )

def main() -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not TELEGRAM_BOT_TOKEN:
        logger.error("–ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        sys.exit(1)
        
    if not TELEGRAM_CHAT_ID:
        logger.error("–ù–µ –∑–∞–¥–∞–Ω ID —á–∞—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("rate", get_rate))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞
    job_queue = application.job_queue
    job_queue.run_repeating(send_rate_update, interval=UPDATE_INTERVAL, first=1)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main() 